#!/usr/bin/perl

use warnings;
use strict;
use fralib;
use File::Basename;
use Getopt::Long;
use Pod::Usage;

=head1 NAME

chisq2pval-new

=head1 SYNOPSIS

 chisq2pval [options]	<tsvfile>

  -h help
  -c column(s)
  -d degree of freedom, default is 1 (required)
  tsvfile tab-delimited file with header
 	
 	-v alternatively a single value can be queried; output will be onscreen
 		 requires the -d option else default is 1
 		 requires also the word "chisqval"
  
  Example:
  	chisq2pval-new -c 1,3 geno.tsv
  	chisq2pval-new -v 0.07982 chisqval
    
    Outputs the original file plus extra columns appending "-p<column-number>" to the original header name
  
=head1 DESCRIPTION

=cut

#option variables
my $help;
my $col = 0;
my $tsvFile;
my $df = 1;
my $value = -1;

#initialize options
Getopt::Long::Configure ('bundling');

if(!GetOptions ('h'=>\$help, 'd=i'=>\$df, 'c=s'=>\$col, 'v=s'=>\$value) || scalar(@ARGV)!=1)
{
    if ($help)
    {
        pod2usage(-verbose => 2);
    }
    else
    {
        pod2usage(1);
    }
}


if ($value != -1)
{
	## chisq input
	#my $chisq = 3.84;
	my $pval = chisq2p($value,$df);
	printf "p-value for chisq value $value is: $pval\n";
	exit;
}

## column flag
my $cflag;
chomp $col;
 
## column parsing
## one value of c
if($col =~ m/^\d+$/)
{
	$cflag = "single";
}
## if k is 0
elsif ($col eq 0)
{
	die "Lack of parameter c:$!";
}
else # k is not a single value
{
	## k is a range, hypenated
	if ($col =~ m/\d+(-)\d+/)
	{
		$cflag = "hyphen";
	}
	## single numbers comma-delimited
	elsif($col =~ m/\d+(,)\d+/) 
	{
		$cflag = "comma";
	}
	else
	{
		die "$col is not a valid parameter format!!";
	}
}

## input file
my $ifile = $ARGV[0];
open (INPUT, $ifile) || die "Cannot open $ifile: $!";

## output file
my $ofile = "$ifile.chi2p";
open (OUTPUT, ">$ofile") || die "Cannot open $ofile: $!";

## variables
my $headerProcessed = 0;
my $colno = 0;
my $maxi = 0;

LINE: while(<INPUT>)
{
	$colno = s/\t/\t/g + 1;
	
	chomp $_;
	print OUTPUT "$_";
	my @fields = split(/\t/,$_);
	chomp @fields;
	
	## header not processed
	if(!$headerProcessed)
	{		
		if($cflag eq "single")
		{
			if ($col > $colno)
			{
				close (OUTPUT);
				unlink($ofile);
				die "There are lesser number of columns than the one stated in parameter c!!";
			}
			
			my $column = $col - 1;
			print OUTPUT "\t$fields[$column]\-p$col";
		}
		elsif($cflag eq "hyphen")
		{
			my @columns = split("-",$col);
			if ($columns[1] > $colno)
			{
				close (OUTPUT);
				unlink($ofile);
				die "There are lesser number of columns than the one stated in parameter c!!";
			}
			
			foreach my $column ($columns[0]..$columns[1])
			{				
				$column = $column - 1;
				printf OUTPUT "\t$fields[$column]\-p%d", $column+1;
			}
		}
		elsif($cflag eq "comma")
		{
			my @columns = split(",",$col);
			chomp @columns;
			for (my $i=0; $i<@columns;$i++)
			{
				if($maxi < $columns[$i])
				{
					$maxi = $columns[$i];
				}
			}
			
			if ($maxi > $colno)
			{
				close (OUTPUT);
				unlink($ofile);
				die "There are lesser number of columns than the one stated in parameter c!!";
			}
			
			foreach my $column (@columns)
			{
				$column = $column - 1;
				printf OUTPUT "\t$fields[$column]\-p%d", $column+1;
			}
		}
		
		print OUTPUT "\n";
		$headerProcessed = 1;
		next LINE;
	}
	else ## header processed
	{
		if($cflag eq "single")
		{
			my $column = $col - 1;
			my $pval = chisq2p($fields[$column],$df);
			printf OUTPUT "\t$pval";
		}
		elsif($cflag eq "hyphen")
		{
			my @columns = split("-", $col);
			
			foreach my $column ($columns[0]..$columns[1])
			{
				$column = $column - 1;
				my $pval = chisq2p($fields[$column],$df);
				printf OUTPUT "\t$pval";
			}
		}
		elsif($cflag eq "comma")
		{
			my @columns = split("," , $col);
		  chomp @columns;
			
			foreach my $column (@columns)
			{
				$column = $column - 1;
				my $pval = chisq2p($fields[$column],$df);
				printf OUTPUT "\t$pval";
			}
		}
	}
	print OUTPUT "\n";
}

close(INPUT);
close(OUTPUT);
##############################################################################################################################
## gamma function approximation
## Algorithms and coefficient values from "Computation of Special
##      Functions", Zhang and Jin, John Wiley and Sons, 1996.
##  (C) 2003, C. Bond. All rights reserved.
## Returns gamma function of argument 'x'.
##
## NOTE: Returns 1e308 if argument is a negative integer or 0,
##      or if argument exceeds 171.


sub gamma
{
	my $z = shift;
	print "Approximating gamma distribution...\n";
	
	my $ga = 0;
	my $zz = 0;
	my $r = 0;
	
	my @probs = (1.0,
        0.5772156649015329
       -0.6558780715202538,
       -0.420026350340952e-1,
        0.1665386113822915,
       -0.421977345555443e-1,
       -0.9621971527877e-2,
        0.7218943246663e-2,
       -0.11651675918591e-2,
       -0.2152416741149e-3,
        0.1280502823882e-3,
       -0.201348547807e-4,
       -0.12504934821e-5,
        0.1133027232e-5,
       -0.2056338417e-6,
        0.6116095e-8,
        0.50020075e-8,
       -0.11812746e-8,
        0.1043427e-9,
        0.77823e-11,
       -0.36968e-11,
        0.51e-12,
       -0.206e-13,
       -0.54e-14,
        0.14e-14);
  
  if($z > 171.0) 
  {
  	return 1e308;
  }
  
  if($z == int($z))
  {
  	if($z > 0.0)
  	{
  		$ga = 1.0; ## use factorial
  		for(my $i=2;$i<$z;$i++)
  		{
  			$ga *= $i;
  		}
  	}
  	else
  	{
  		$ga = 1e308;
  	}
  }
  else
  {
  	if(abs($z) > 1.0)
  	{
  		$zz = abs($z);
  		my $int_zz = int($zz);
  		$r = 1.0;
  		for(my $i=1;$i<=$int_zz;$i++)
  		{
  			$r *= ($zz-$i);
  		}
  		$zz -= $int_zz;
  	}
  	else
  	{
  		$zz = $z;
  		my $gr = $prob[24];
  		for(my $i=23;$i>=0;$i--)
  		{
  			$gr = $gr*$zz+$prob[$i];
  		}
  		$ga = 1.0/($gr * $zz);
  		
  		if(abs($z) > 1.0)
  		{
  			$ga *= $r;
  			if($z < 0.0)
  			{
  				$ga = 
  			}
  		}
  	}
  }
}

#######################################################
## incgamma(x,a) = (x^a)*exp(-x)*sum(n=0:infinity){(x^n)/(a*(a+1)*...*(a+n))}
## Error:  Arbitrary.  As accurate as perl allows
## http://www.dreamincode.net/forums/showtopic12775.htm

sub incgamma
{
	my ($x, $a) = (shift,shift);
	print "Approximating incomplete gamma distribution...\n";
	
	my $sum = 0;
	my $term = 1.0/$a;
	my $count = 1;
	
	while($term != 0)
	{
		$sum = $sum + $term;
		$term = $term * ($x/($a + $count));
		$count++;
	}
	
	return (($x**$a) * exp(-1*$x) * $sum);
}

#######################################################
## chisq2p -- probability of chi-sq value (CDF)
## lowergamma(1/2,x/2)/gamma(1/2) where gamma(1/2)=SQRT(PI)
## chidist(x,v) = ( exp((-1*x)/2) * x^( (v/2) - 1) ) / ( 2^(v/2) * gamma(v/2) )
## where x >= 0

sub chisq2p
{
	my ($chisq, $df) = (shift, shift);
	my $pval = incgamma($chisq/2.0, $df/2.0)/gamma($chisq/2.0);
	return $pval;
}