#!/usr/bin/perl
################################################################
# Name: Jieming Chen
# CBB752 Final Project 2011
################################################################

use warnings;
use strict;
use File::Basename;
use Getopt::Long;
use Pod::Usage;

=head1 NAME

featureSelection

=head1 SYNOPSIS

 featureSelection -options [input file]

  -h help
  The script takes in an input file 
  
  It automatically reads in these files (required to name them as follows):
  and produces an output file.
  -o output filename; default filename is "features_output.txt"
  
  [input file]  
  - a tab-delimited file with a list of protein/peptide sequences (regardless of length); default filename "train_input.txt"
  - first column is the sequence
  - second column is a numeric score (e.g. binding reactivities)
    
  output file format:
  
  
  Example:
     featureSelection train_input.txt
  
=head1 DESCRIPTION

=cut

## option variables (alow user input) /defaults
my $help;
my $ifile = "train_input.txt";
my $ofile = "features_output.txt";

## initialize options
Getopt::Long::Configure ("bundling");

if(!GetOptions ("h"=>\$help, "o=s"=>\$ofile) || scalar(@ARGV)!=1)
{
    if ($help)
    {
        pod2usage(-verbose => 2);
    }
    else
    {
        pod2usage(1);
    }
}

## input file
$ifile = $ARGV[0];

open (INPUT, $ifile) || die "Cannot open $ifile: $!";
#open (MATRIX, $matrixFile) || die "Cannot open $matrixFile: $!";

## output file
open (OUTPUT, ">$ofile") || die "Cannot open $ofile: $!";
print OUTPUT "\@relation JiemingChen\n";

## variables
my %peptide;
my @fileOrder;
my @AMINO = ("X","Z","I","L","W","F","V","M","Y","A","P","T","S","C","G","N","D","Q","E","H","K","R");
my %AAnum;

## read input file
while (<INPUT>)
{
	chomp;
	s/^[\t\ ]+/\t/g;
	s/^\t//g; 
	s/\t$//g;
		
	# process each line: sequence\tclassScore
	# set sequence as the ID
	my @line = split(/\t/,$_);
	
	push(@fileOrder,$line[0]);
	
	if($line[1] > 10000)
	{
		$peptide{$line[0]}{"class"} = 1;
	}
	else
	{
		$peptide{$line[0]}{"class"} = 0;
	}
	
}

## prints to output
# attributes
print OUTPUT "\@attribute MolWeight numeric\n";
print OUTPUT "\@attribute Length numeric\n";
print OUTPUT "\@attribute MeanHydrophobicity numeric\n";
print OUTPUT "\@attribute Positions3591012 numeric\n";
print OUTPUT "\@attribute NetCharge numeric\n";
print OUTPUT "\@attribute PercentageHydrophobic numeric\n";
print OUTPUT "\@attribute PercentagePolar numeric\n";
print OUTPUT "\@attribute PercentageAromatic numeric\n";
print OUTPUT "\@attribute PercentageAliphatic numeric\n";
print OUTPUT "\@attribute PercentageCharged numeric\n";
print OUTPUT "\@attribute PercentagePosCharge numeric\n";
print OUTPUT "\@attribute PercentageNegCharge numeric\n";
print OUTPUT "\@attribute PercentageTiny numeric\n";

for (my $i=0;$i<@AMINO;$i++)
{
	my $name = "Percentage".$AMINO[$i];
	print OUTPUT "\@attribute $name numeric\n";
}

print OUTPUT "\@attribute class \{0,1\}\n";
print OUTPUT "\@data\n";

# data
for (my $i=0;$i<@fileOrder;$i++)
{
	my $aaflag = 0;
	
	############### MolWeight
	my @sequence = split(//,$fileOrder[$i]);
	print OUTPUT calcMW(\@sequence).",";
	
	############### Length
	my $len = $#sequence+1;
	print OUTPUT $len.",";
	
	############### MeanHydrophobicity
	my $meanhyP = calchydroP(\@sequence) / $len;
	printf OUTPUT "%.3f,",$meanhyP;
	
	############### Positions3591012 check if these positions are hydrophobic residues
	my $countHydroaa = 0;	
	foreach my $posi (2,4,8,9,11)
	{
		if(!exists($sequence[$posi]))
		{
			$countHydroaa = $countHydroaa + 0;
		}
		elsif($sequence[$posi] =~ m/^(I|V|L|M|C|F|A|G|T|Y|W|H|K)$/)
		{
			$countHydroaa++;
		}
	}
	my $percenthydroaa = $countHydroaa / 5;
	print OUTPUT $percenthydroaa.",";
		
	############### NetCharge@7.4
	printf OUTPUT "%.3f,",netcharge74(\@sequence);
	
	############### percentage of hydrophobic residues
	my $countHpAA = 0;
	for(my $j=0;$j<@sequence;$j++)
	{
		if($sequence[$j] =~ m/^(I|V|L|M|C|F|A|G|T|Y|W|H|K)$/)
		{
			$countHpAA++;
		}
	}
	
	printf OUTPUT "%.3f,",($countHpAA/$len);
	
	############### percentage of polar residues
	my $countPolar = 0;
	for(my $j=0;$j<@sequence;$j++)
	{
		if($sequence[$j] =~ m/^(W|Y|H|K|R|T|C|S|N|D|E|Q)$/)
		{
			$countPolar++;
		}
	}
	
	printf OUTPUT "%.3f,",($countPolar/$len);
	
	############### percentage of aromatic residues
	my $countArom = 0;
	for(my $j=0;$j<@sequence;$j++)
	{
		if($sequence[$j] =~ m/^(F|Y|W|H)$/)
		{
			$countArom++;
		}
	}
	
	printf OUTPUT "%.3f,",($countArom/$len);
	
	############### percentage of aliphatic residues
	my $countAlip = 0;
	for(my $j=0;$j<@sequence;$j++)
	{
		if($sequence[$j] =~ m/^(I|V|L)$/)
		{
			$countAlip++;
		}
	}
	
	printf OUTPUT "%.3f,",($countAlip/$len);

	############### percentage of charged residues
	my $countCharged = 0;
	for(my $j=0;$j<@sequence;$j++)
	{
		if($sequence[$j] =~ m/^(D|E|K|R|H)$/)
		{
			$countCharged++;
		}
	}
	
	printf OUTPUT "%.3f,",($countCharged/$len);
	
	############### percentage of positively charged residues
	my $posCharge = 0;
	for(my $j=0;$j<@sequence;$j++)
	{
		if($sequence[$j] =~ m/^(K|H|R)$/)
		{
			$posCharge++;
		}
	}
	
	printf OUTPUT "%.3f,",($posCharge/$len);
	
	############### percentage of negatively charged residues
	my $negCharge = 0;
	for(my $j=0;$j<@sequence;$j++)
	{
		if($sequence[$j] =~ m/^(D|E)$/)
		{
			$negCharge++;
		}
	}
	
	printf OUTPUT "%.3f,",($negCharge/$len);	

	############### percentage of tiny residues
	my $tiny = 0;
	for(my $j=0;$j<@sequence;$j++)
	{
		if($sequence[$j] =~ m/^(A|G|C|S)$/)
		{
			$tiny++;
		}
	}
	
	printf OUTPUT "%.3f,",($tiny/$len);	
		
	############### PercentagesAA	
	for(my $j=0;$j<@sequence;$j++)
	{
		if(!$aaflag)
		{
			$AAnum{$fileOrder[$i]}{$sequence[$j]} = 1;
			$aaflag = 1;
		}
		else
		{
			$AAnum{$fileOrder[$i]}{$sequence[$j]}++;
		}
	}
	
	for (my $j=0;$j<@AMINO;$j++)
	{			
		if(!exists($AAnum{$fileOrder[$i]}{$AMINO[$j]}))
		{
			print OUTPUT "0,";
		}
		else
		{
			my $aapercent = $AAnum{$fileOrder[$i]}{$AMINO[$j]} / $len;
			printf OUTPUT "%.3f,",$aapercent;
		}
	}
	
	############### class
	print OUTPUT $peptide{$fileOrder[$i]}{"class"}."\n";
}

close (INPUT);
close (OUTPUT);

###############################################################
# this function calculates the molecular weight
###############################################################
sub calcMW
{
	my @sequence = @{(shift)};
	my $MW = 0;
	
	for (my $i=0; $i<@sequence; $i++)
	{
		$MW = $MW + aaPpty($sequence[$i],"weight");
	}
	
	$MW = $MW - ($#sequence) * 18;
	return $MW;
}

###############################################################
# this function calculates the total hydrophobicity
###############################################################
sub calchydroP
{
	my @sequence = @{(shift)};
	my $hpb = 0;
	
	for (my $i=0; $i<@sequence; $i++)
	{
		$hpb = $hpb + aaPpty($sequence[$i],"hydro");
	}
	
	return $hpb;
}
	
###############################################################
# this function calculates the net charge at pH 7.4
###############################################################
sub netcharge74
{
	my @sequence = @{(shift)};
	my $charge = ((10**(9.69)) / ((10**(7.4))+(10**(9.69)))) - ((10**(7.4)) / ((10**(7.4))+(10**(2.34))));
	my %KRHDECY = (
		"K" => 0,
		"R" => 0,
		"H" => 0,
		"D" => 0,
		"E" => 0,
		"C" => 0,
		"Y" => 0
		);
	
	my %KRHDECYpKa = (
		"K" => 10.5,
		"R" => 12.4,
		"H" => 6,
		"D" => 3.86,
		"E" => 4.25,
		"C" => 8.33,
		"Y" => 10
		);
		
	for (my $i=0; $i<@sequence; $i++)
	{
		if($sequence[$i] =~ m/^(K|R|H|D|E|C|Y)$/)
		{
			$KRHDECY{$sequence[$i]}++;
		}
	}
	
	foreach my $xx (keys %KRHDECY)
	{
		my $pka = $KRHDECYpKa{$xx};
		my $count = $KRHDECY{$xx};
				
		if($xx =~ m/^(K|R|H)$/)
		{
			$charge = $charge + $count * ((10**($pka))/((10**(7.4))+(10**($pka))));
		}
		elsif($xx =~ m/^(D|E|C|Y)$/)
		{
			$charge = $charge - $count * ((10**(7.4))/((10**(7.4))+(10**($pka))));
		}
		
	}
	
	return $charge;
}

###############################################################
# this function stores the amino acid properties
###############################################################
sub aaPpty
{
	my ($aa, $flag) = (shift, shift);
	my %AAW = ();
	
	if($flag eq "hydro")
	{
		$AAW{"hydro"} = {
			"I" => 8.7,
			"L" => 9.7,
			"W" => 9.7,
			"F" => 10,
			"V" => 4.1,
			"M" => 4.6,
			"Y" => 2.5,
			"A" => -(1.1),
			"P" => -(0.2),
			"T" => -(3.8),
			"S" => -(4.3),
			"C" => -(2.3),
			"G" => -(2.4),
			"N" => -(7.1),
			"D" => -(8.3),
			"Q" => -6,
			"E" => -(8.3),
			"H" => -(3.8),
			"K" => -(9.9),
			"R" => -10,
			"X" => 0,
			"Z" => 9.1
		};
	}
	elsif($flag eq "weight")
	{
		$AAW{"weight"} = { 
			"A" => 89.09,
			"C" => 121.16,
			"D" => 133.1,
			"E" => 147.13,
			"F" => 165.19,
			"G" => 75.07,
			"H" => 155.16,
			"I" => 131.18,
			"K" => 146.19,
			"L" => 131.18,
			"M" => 149.21,
			"N" => 132.12,
			"P" => 115.13,
			"Q" => 146.15,
			"R" => 174.2,
			"S" => 105.09,
			"T" => 119.12,
			"V" => 117.15,
			"W" => 204.23,
			"Y" => 181.19,
			"B" => 132.61,
			"Z" => 146.64,
			"X" => 0
		};
	}
	return $AAW{$flag}{$aa};
}
