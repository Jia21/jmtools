#!/usr/bin/perl -w

use strict;
use warnings; 
use fralib;
use Getopt::Long;
use Pod::Usage;
use File::Basename;

=head1 NAME

frappe2distruct

=head1 SYNOPSIS

frappe2distruct [options] <filename>

   -h    displays this help page
   -s    sample annotation (sa) file (required)
         Must contain individual name with respective population-abbreviation.
         
   -r    ref.txt (optional)
         A tab-delimited file referencing the change of names from frapCut.
   
   -i    boolean, whether to include individual q in drawparams.
         Default is 0, that individual q is not included in the ps file.
         Please note that the .indivq file will be generated irregardless.
   
   -o    output name
         Please limit to 30 characters because DISTRUCT cannot take longer than 30.
         Please also include the k value.
            
   Example:
           frappe2distruct -i 1 -o 19samples-20snps-hapmap-k2 -s geno.sa -r geno-ref.txt frappe_result.txt
      
Generates a folder containing
(a) a population Q-matrix (19samples-20snps-hapmap-k2.popq) file 
(b) an individual Q-matrix (19samples-20snps-hapmap-k2.indivq) file 
(c) a .names file (19samples-20snps-hapmap-k2.names) 
(d) a .perm file (up to 20 colours numbered 1 to 20 depending on K) (2.perm)
(e) drawparams file
for program DISTRUCT.

Please CHECK the script for the colors first before running this...

=head1 DESCRIPTION

=cut

# option variables
my $help = 0;
my $saFile;
my $refFile;
my $indiv = 0;
my $name = 0;

# command line error handling
if (!GetOptions ('h'=>\$help, 's=s'=>\$saFile, 'r:s'=>\$refFile, 'i=i'=>\$indiv, 'o=s'=>\$name) 
		|| scalar(@ARGV!=1) || !defined($saFile))
{
	if ($help)
    {
        pod2usage(-verbose => 2);
    }
    else
    {
        pod2usage(1);
    }
}

if ($name eq "0")
{
	die "Lack of parameters!: $!";
}
elsif (length($name)>30)
{
	die "-o output name too long!";
}

###### input file
my $frapFile = $ARGV[0];
open(INPUT, $frapFile) || die "Cannot open $frapFile: $!";

###### creates an output directory
my $dir = "distruct-$name";
mkdir ($dir) || die "Cannot create directory $dir: $!";

###### output file INDIVQ POPQ and NAMES
my $popqFile = "$dir/$name.popq";
my $nameFile = "$dir/$name.names";
my $indivqFile = "$dir/$name.indivq";

open (POPQ, ">$popqFile") || die "Cannot open $popqFile: $!";
open (NAMES, ">$nameFile") || die "Cannot open $nameFile: $!";
open (INDIVQ, ">$indivqFile") || die "Cannot open $indivqFile: $!";

# data variables 
my %memCoeff; # $memCoeff{$pop}{$k} total memership coeff for that pop that k value
my %numInd; # $numInd{$pop} total num of ind for that pop
my $indCount = 0;
my $pop;
my $k = 0;
my $realSampleid;
my @populations;
my $popcount = 0;
my $colorflag = 0;
my $permFile;
my %popNum;

# looking in the input file
while (<INPUT>)
{
	my $flag = 0;	
	$indCount++;
	
	# number of populations/clusters (K)
	# the array starts from 0, and there are 2 columns of names + 1 column ":"
	$k = (s/ /\t/g) - 3;
	
	# creates perm file
	if (!$colorflag)
	{
		$permFile = permFile($k, $dir);
		$colorflag = 1;
	}
	
	my @items = split(/\t/, $_);
	chomp @items;
	
	# search the sample-id in reference.txt
	if (defined($refFile))
	{
		$realSampleid = searchRef($refFile, $items[1]);
		
		if($realSampleid eq 'NA')
		{
			$realSampleid = $items[1];
		}
	}
	else
	{
		$realSampleid = $items[1];
	}
	
	# search the sampleids in sa file for the populationabbrev
	$pop = searchSA($saFile, $realSampleid);
	
	# counts number of individuals in that pop
	$numInd{$pop} += 1;
	
	# output to INDIVQ
	# using popcount assumes that the samples are in running order of the population
	print INDIVQ "  $indCount $realSampleid    (0)   "; # 1st 2nd 3rd col
	if ($numInd{$pop} == 1)
	{
		push (@populations, $pop);
		$popcount++;
		$popNum{$pop} = $popcount;
		print INDIVQ "$popNum{$pop} : "; # 4th col
	}
	else
	{
		print INDIVQ "$popNum{$pop} : ";				
	}
#	print "$realSampleid\t$pop\t$k\t$numInd{$pop}\n"; #debug
	
	# store the sum of individual membership coefficients
	foreach my $i (1 .. $k)
	{
		printf INDIVQ (" %0.3f", $items[$i+2]);
		$memCoeff{$pop}{$i} += $items[$i+2];
#		print "$pop\t$i\t$k\t$memCoeff{$pop}{$i}\n"; #debug		
	}
	
	print INDIVQ "\n";
	
}

#### outputting POPQ NAMES
for (my $i=0; $i<@populations; $i++)
{
	my $count = $i+1;
	print POPQ "  $count:     ";
	print NAMES "$count $populations[$i]\n";
	
	foreach my $j (1 .. $k)
	{
		my $popCoeff = $memCoeff{$populations[$i]}{$j}/$numInd{$populations[$i]};
		printf POPQ ("%0.3f  ", $popCoeff);		
	}
	
	print POPQ "     $numInd{$populations[$i]}\n";
}

close (INDIVQ);
close (POPQ);
close (NAMES);
close (INPUT);

my $numpop = @populations;
drawparams($dir, $name, $permFile, $popqFile, $nameFile, $indivqFile, $k, $numpop, $indCount, $indiv);


##################################################################################
#####################################################
# this function prints out the drawparams file

sub drawparams
{
	my ($dir, $name, $permFile, $popqFile, $nameFile, $indivqFile, $k, $numpop, $indCount, $indiv)
		= (shift, shift, shift, shift, shift, shift, shift, shift, shift, shift);
		
	my $paraFile = "$dir/drawparams";
	open (DRAW, ">$paraFile") || die "Cannot open file $paraFile: $!";
	
	foreach my $i ($permFile, $popqFile, $nameFile, $indivqFile)
	{
		my @f = split("\/", $i);
		chomp @f;
		$i = $f[1];
	}
	
	print DRAW "\#define INFILE_POPQ $popqFile\n".
						 "\#define INFILE_INDIVQ $indivqFile\n".
						 #"\#define INFILE_LABEL_BELOW $nameFile\n".
						 "\#define INFILE_LABEL_BELOW $nameFile\n". #predefined file
						 "\#define INFILE_CLUST_PERM $permFile\n".
						 "\#define OUTFILE $name.ps\n".
						 "\#define K $k\n".
						 "\#define NUMPOPS $numpop\n".
						 "\#define NUMINDS $indCount\n";

	if ($indiv)
	{
		print DRAW "\#define PRINT_INDIVS 1\n";
	}
	else 
	{
		print DRAW "\#define PRINT_INDIVS 0\n";
	}
						 
	print DRAW "\#define PRINT_LABEL_ATOP 0\n".
						 "\#define PRINT_LABEL_BELOW 1\n".
						 "\#define PRINT_SEP 1\n".
						 "\#define FONTHEIGHT 6\n".
						 "\#define DIST_ABOVE 5\n".
						 "\#define DIST_BELOW -7\n".
						 "\#define BOXHEIGHT 50\n".
						 "\#define INDIVWIDTH 0.4\n".
						 "\#define ORIENTATION 1 \n".
						 "\#define XORIGIN 100\n".
						 "\#define YORIGIN 10\n".
						 "\#define XSCALE 1\n".
						 "\#define YSCALE 1\n".
						 "\#define ANGLE_LABEL_ATOP 90\n".
						 "\#define ANGLE_LABEL_BELOW 90\n".
						 "\#define LINEWIDTH_RIM 3\n".
						 "\#define LINEWIDTH_SEP 0.05\n".
						 "\#define LINEWIDTH_IND 0.3\n".
						 "\#define GRAYSCALE 0\n".
						 "\#define ECHO_DATA 1\n".
						 "\#define REPRINT_DATA 1\n".
						 "\#define PRINT_INFILE_NAME 0\n".
						 "\#define PRINT_COLOR_BREWER 1\n";
						 
	close (DRAW);
}

#####################################################
# this function prints out the .perm file

sub permFile
{
	my ($k, $dir) = (shift, shift);	
	
	my $colorFile = "$dir/$k.perm";
	open (COLOR, ">$colorFile") || die "Cannot open $colorFile: $!";
	
	# 20 colors
#	my @colors = ("orange", "blue", "yellow" ,"pink" ,"green",
#								"purple", "red", "light_green", "dark_blue", "light_purple",
#								"light_yellow", "brown", "light_blue", "olive_green", "peach",
#								"sea_green", "yellow_green", "gray", "black", "blue_green");
	
	# another set of PASNP colors 20 colors
	my @colors = ("black", "yellow", "olive_green" ,"brown" ,"green",
								"yellow_green", "pink", "red", "purple", "dark_blue",
								"white", "light_blue", "orange", "sea_green", 
								"blue", "gray" ,"light_blue2" ,"light_yellow" ,"blue_green" ,"light_purple");

	foreach my $i (0 .. $k-1)
	{
		my $count = $i + 1;
		print COLOR "$count $colors[$i]\n";
	}
	
	close (COLOR);
	
	return $colorFile;
}

#####################################################
# this function searches sa file
# and returns the population the sample-id belongs to

sub searchSA
{
	my ($saFile, $sampleid) = (shift, shift);
	my %label2column;
	my $headerProcessed = 0;
	
	open (SA, $saFile) || die "Cannot open $saFile: $!";
	
	while (<SA>)
	{
		my @fields = split(/\t/, $_);
		chomp @fields;
		
		# process header
		if (!$headerProcessed)
		{
			SEARCH_LABEL: for my $label ('sample-id','population-abbreviation')
			{
				for my $col (0 .. $#fields)
				{
					if($fields[$col] eq $label)
					{
						$label2column{$label} = $col;
						next SEARCH_LABEL;
					}
				}
			}
			$headerProcessed = 1;
		}
		else
		{
			if ($fields[$label2column{'sample-id'}] eq $sampleid)
			{
				return "$fields[$label2column{'population-abbreviation'}]";
			}
		}
	}
	close (SA);
}

#####################################################
# this functions searches the reference file for the sample-id
# and returns the real sample-id

sub searchRef
{
	my ($refFile, $sampleid) = (shift, shift);
	my %label2column;
	my $headerProcessed = 0;
	
	open(REFER, $refFile) || die "Cannot open $refFile: $!";

	while (<REFER>)
	{
		my @fields = split(/\t/, $_);
		chomp @fields;
		
		# process header
		# find out which are the corresponding columns
		if (!$headerProcessed)
		{
			SEARCH_LABEL: for my $label ('INDIVIDUAL_NAME', 'NEW_INDIVIDUAL_NAME')
			{
				for my $col (0 .. $#fields)
				{
					if ($fields[$col] eq $label)
					{
						$label2column{$label} = $col;
						next SEARCH_LABEL;
					}
				}
			}
			$headerProcessed = 1;
		}
		else # else if header processed
		{
			# search for real sample id
			if ($fields[$label2column{'NEW_INDIVIDUAL_NAME'}] eq $sampleid)
			{
				return $fields[$label2column{'INDIVIDUAL_NAME'}];
			}
		}
	}
	
	return 'NA';
	close (REFER);
}

