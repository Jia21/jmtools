#!/usr/bin/perl -w

use warnings;
use strict;
use fralib;
use File::Basename;
use Getopt::Long;
use Pod::Usage;

=head1 NAME

foverlap4vik

=head1 SYNOPSIS

 foverlap4vik <subject> <reference>	

  -h help
  -o output filename; default is z-<subject>-<reference>.out
  <subject>=EXAMPLE affy
  <reference>=EXAMPLE reference tags (dpets) that you want to find affy in
  -t a threshold to count an overlap between 2 regions as an overlap e.g 0.5 would correspond to 50% overlap.
     Default=0.5. Set as 0 if you want everything to be included with no threshold. 
     
  -s if toggled 1, remove all "chr-not-matched" and those situation 0, "in-chr-but-not-overlap-at-all".
     Default=1. Note that if this is toggled 0, threshold is set to 0, regardless.

Please try to reduce your filenames because the output files use both the filenames.

 file format
 (1) id (always the first column)
 (2) chromosome
 (3) start (1-based)
 (4) END (1-based)
  
 test for 4 situations:
 situation 1: subj1-subj2 within ref1-ref2; overlap = subjlength/reflength
 situation 2: ref1-ref2 within subj1-subj2; overlap = reflength/subjlength

 situation 3: overlap = (refEnd-subjStart+1)/subjlength or (refEnd-subjStart+1)/reflength
      subj1-------subj2
 ref1--------ref2	

 situation 4: overlap = (subjEnd-refStart+1)/subjlength or (subjEnd-refStart+1)/reflength
 subj1--------subj2
	    ref1-------ref2	
 
 Also test if chromosome is the same.
  
    example: foverlap4vik affy.txt 41positions-ref.list -t 0.5 -s 1
    
    OUTPUT: 
    overlap1 denotes denominator subjlength
    overlap2 denotes denominator reflength for sit 3 and 4
    sit 1 and 2 only has overlap1; overlap2 is n/a.
       
=head1 DESCRIPTION

=cut

#option variables
my $help;
my $ofilename = 0;
my $sitonly = 1;
my $threshold = 0.5;

#initialize options
#Getopt::Long::Configure ('bundling');

#if (!GetOptions('h'=>\$help) || scalar(@ARGV)!=2)
#{
#    if ($help)
#    {
#        pod2usage(-verbose => 2);
#    }
#    else
#    {
#        pod2usage(1);
#    }
#}

GetOptions('h'=>\$help, 'o=s'=>\$ofilename, 's=i'=>\$sitonly, 't=f'=>\$threshold);

if ($help)
{
   pod2usage(-verbose => 2);
}

if (@ARGV==0)
{
	die "PLEASE ADD ARGUMENTS!: $!";
}

#print "sitonly = $sitonly\n"; #debug
if($sitonly == 0)
{
	if($threshold != 0)
	{
		warn 'Please note that the -t option will be overwritten with -s 0';
	}
	
	$threshold = 0;
}
elsif($sitonly > 1)
{
	die "You can only choose 0 or 1 in -s option: $!";
}

# variables
my $subj=$ARGV[0];
my $ref=$ARGV[1];
my($refname, $refpath, $refext) = fileparse($ref, '\..*');
my($subjname, $subjpath, $subjext) = fileparse($subj, '\..*');
my $ofile = '';

if($ofilename eq 0)
{
	$ofile="z-$subjname-in-$refname-checked.out";
}
else
{
	$ofile = $ofilename;
}

# input files
open(SUBJ, $subj) || die "Cannot open $subj";
my @subj=<SUBJ>;

open(REFERENCE, $ref) || die "Cannot open $ref";
my @ref=<REFERENCE>;

print "situations-only = $sitonly; threshold = $threshold\n";

# output file
open (OUTPUT, ">$ofile") || die "Cannot open $ofile: $!";
#print OUTPUT "subj-id\tsubj-chr\tsubj-start\tsubj-end\tref-id\tref-chr\tref-start\tref-end\tsituation\n";

## loop variables
my %header2colsubj;
my %header2colref;
my $subjheaderProcessed = 0;
my $refheaderProcessed = 0;
my $subjchr = 0;
my $subjStart = 0;
my $subjEnd = 0;
my $subjID = '';

my $refchr = 0;
my $refStart = 0;
my $refEnd = 0;
my $refID = '';

my %id2linesubj;
my %id2lineref;

## in the affy-subject file
LINE1: foreach my $line1 (@subj)
{
	chomp $line1;
	my @subjPos = split("\t", $line1);
	chomp @subjPos;

	if(!$subjheaderProcessed)
	{
		print OUTPUT join("\t",@subjPos);
		SEARCH_LABEL_SUBJ: for my $label ('id', 'chromosome', 'start', 'end')
		{					
			for (my $i=0;$i<@subjPos;$i++)
			{				
				if($subjPos[$i] eq $label)
				{
					$header2colsubj{$label} = $i;
					next SEARCH_LABEL_SUBJ;
				}
			}
			
			unlink $ofile;
			die "Cannot find $label in $subj";
		} ## loop header's fields
		
		$subjheaderProcessed = 1;
		next LINE1;
	} ## subj header
	else
	{
		$subjchr = $subjPos[$header2colsubj{'chromosome'}];
		$subjStart = $subjPos[$header2colsubj{'start'}];
		$subjEnd = $subjPos[$header2colsubj{'end'}];
		$subjID = $subjPos[$header2colsubj{'id'}];
	}

	## in the reference file tags
	LINE2: foreach my $line2 (@ref)
	{
		chomp $line2;
		my @refPos = split("\t", $line2);
		chomp @refPos;
		
		# this additional if statement is to get around the comparison of the line in the subj file comparing 
		# with the header of the reference file
		if((!$refheaderProcessed) || ($refPos[$header2colref{'id'}] eq 'id'))
		{
			if(!$refheaderProcessed)
			{
				print OUTPUT "\t".join("\t",@refPos)."\tsituation\toverlap1\toverlap2\n";
				
				SEARCH_LABEL_REF: for my $label ('id', 'chromosome', 'start', 'end')
				{					
					for (my $i=0;$i<@refPos;$i++)
					{				
						if($refPos[$i] eq $label)
						{
							$header2colref{$label} = $i;
							next SEARCH_LABEL_REF;
						}
					}
					unlink $ofile;
					die "Cannot find $label in $ref";
				} ## loop header's fields
			}
		
			$refheaderProcessed = 1;
			next LINE2;
		}
		else
		{
			$refchr = $refPos[$header2colref{'chromosome'}];
			$refStart = $refPos[$header2colref{'start'}];
			$refEnd = $refPos[$header2colref{'end'}];
			$refID = $refPos[$header2colref{'id'}];
		}
		
		
		if($subjchr eq 'Y')
		{
			$subjchr = 24;
		}
		elsif($refchr eq 'Y')
		{
			$refchr = 24;
		}
		elsif($subjchr eq 'X')
		{
			$subjchr = 23;
		}
		elsif($refchr eq 'X')
		{
			$refchr = 23;
		}
		else
		{
			##nothing
		}
		
		#print "|$subjchr|$subjStart|$subjEnd|$refchr|$refStart|$refEnd|\n"; ##debug	
		
		if($subjchr eq $refchr)
		{
			## set overlap threshold
			my $overlap1 = 0;
			my $overlap2 = 0;
			my $subjlength = $subjEnd - $subjStart + 1;
			my $reflength = $refEnd - $refStart + 1;
			
			if($subjlength <= 0 || $reflength <= 0)
			{
				die "Please check that the span of the regions is non-negative: $!";
			}
			
			#situation 1
			if(($subjStart>=$refStart)&&($subjEnd<=$refEnd))
			{
				$overlap1 = $subjlength/$reflength;
				
				if($overlap1 >= $threshold)
				{
					print OUTPUT join("\t",@subjPos)."\t".join("\t",@refPos)."\t1\t$overlap1\tn\/a\n";
				}
			}
			elsif (($subjStart<=$refStart)&&($subjEnd>=$refEnd)) #situation2
			{
				$overlap1 = $reflength/$subjlength;
				
				if($overlap1 >= $threshold)
				{
					print OUTPUT join("\t",@subjPos)."\t".join("\t",@refPos)."\t2\t$overlap1\tn\/a\n";
				}
				#else #debug
				#{
					#print "|$subjchr|$refchr|$subjStart|$subjEnd|$refStart|$refEnd|$overlap1|\t|$threshold|\n";
				#}
			}
			elsif (($subjStart>=$refStart)&&($subjStart<=$refEnd)&&($subjEnd>=$refEnd)) #situation3 note that to have an overlapping region a1 can be =t2
			{
				$overlap1 = ($refEnd - $subjStart + 1)/$subjlength;
				$overlap2 = ($refEnd - $subjStart + 1)/$reflength;
				
				if(($overlap1 >= $threshold) || ($overlap2 >= $threshold))
				{
					print OUTPUT join("\t",@subjPos)."\t".join("\t",@refPos)."\t3\t$overlap1\t$overlap2\n";
				}
			}
			elsif (($subjStart<=$refStart)&&($subjEnd>=$refStart)&&($subjEnd<=$refEnd)) #situation4 note that to have an overlapping region a2 can be =t1
			{
				$overlap1 = ($subjEnd - $refStart + 1)/$subjlength;
				$overlap2 = ($subjEnd - $refStart + 1)/$reflength;
				
				if(($overlap1 >= $threshold) || ($overlap2 >= $threshold))
				{
					print OUTPUT join("\t",@subjPos)."\t".join("\t",@refPos)."\t4\t$overlap1\t$overlap2\n";
				}
			}
			else
			{
				if(!$sitonly)
				{
					print OUTPUT join("\t",@subjPos)."\t".join("\t",@refPos)."\t0\tn\/a\tn\/a\n";
				}
			}
		} ## chr matching
		else
		{
			if(!$sitonly)
			{
				print OUTPUT join("\t",@subjPos)."\t".join("\t",@refPos)."\tchr-not-matched\tn\/a\tn\/a\n";
			}
		} ## chr dun match
	} ## ref dpets file 
} ## subject-affy file 



close(SUBJ);
close(REFERENCE);
close(OUTPUT);