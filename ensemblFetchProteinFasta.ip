#!/usr/bin/perl

use strict;
use warnings;

use Bio::EnsEMBL::Registry;

use File::Basename;
use Getopt::Long;
use Pod::Usage;

=head1 NAME

ensemblFetchProteinFasta

=head1 SYNOPSIS

 ensemblFetchProteinFasta -v <version> <infile>

  -h help
  -v state the version of Ensembl you require, default is 73.
  
  <infile>
  - is a list of EnsemblProtein IDs without header
  
  OUTPUT
  - is FASTA format
  
  Example:
     ensemblFetchProteinFasta -v 76 in.txt
  
=head1 DESCRIPTION

=cut

#option variables
my $help;
my $version = 73;

#initialize options
Getopt::Long::Configure ('bundling');

if(!GetOptions ('h'=>\$help, 'v=i'=>\$version) || scalar(@ARGV)!=1)
{
    if ($help)
    {
        pod2usage(-verbose => 2);
    }
    else
    {
        pod2usage(1);
    }
}

#
#
#my $registry = 'Bio::EnsEMBL::Registry';
#$registry->load_registry_from_db(-host => 'ensembldb.ensembl.org',
#				 -user => 'anonymous',
#				 -version => $version);
#
#my $translation_adaptor = $registry->get_adaptor('Human', 'Core', 'Translation');
#
#open my $INPUT, "<$ARGV[0]" or die "Cannot open file $ARGV[0]: $!\n";
##open my $OUTPUT, ">$ARGV[1]" or die "Cannot open file $ARGV[1]: $!\n";
#my $FORMAT = '^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<';
#
#while (my $stable_id = <$INPUT>) {
#  chomp($stable_id);
#
#  my $translation = 
#    $translation_adaptor->fetch_by_stable_id($stable_id);
#  warn "Undefined translation object for stable id: $stable_id"
#    and next unless $translation;
#
#  my $gene = $translation->transcript->get_Gene();
#
#  printf ">%s|%s|%s\n", $gene->seq_region_name, $gene->stable_id, $stable_id;
#
#  my $sequence = $translation->seq;
#  my $start = 0;
#  my $end = length($sequence);
#  #chunk the sequence in 60kb chunks to use less memory
#  my $cur = $start;
#  while ($cur < $end) {
#    my $to = $cur + 60;
#    $to = $end if $to > $end;
#    my $seq = substr($sequence, $cur, $to-$cur);
#    print $seq, "\n";
#    $cur = $to;
#  }
#  # while($cur <= $end) {
#  #   my $to = $cur + 59_999;
#  #   $to = $end if($to > $end); 
#  #   my $seq = substr($sequence, $cur, $to);
#  #   $cur = $to + 1;
#  #   write_seq($OUTPUT, $FORMAT, $seq);
#  # }
#}
#
#close $INPUT;
##close $OUTPUT;
#
#sub write_seq {
#  my ($self, $FH, $FORMAT, @values) = @_;
#  
#  #while the last value still contains something
#  while(defined($values[-1]) and $values[-1] ne '') {
#    formline($FORMAT, @values);
   print( $FH, $^A );
  #  $^A = '';
  #}
#}

